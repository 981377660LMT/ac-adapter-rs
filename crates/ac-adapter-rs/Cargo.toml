[package]
name = "ac-adapter-rs"
version = "0.1.0"
authors = ["ngtkana <ngtkana@gmail.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
accum = { path = "../utils/accum" }
alg_inversion_number = { path = "../algebra/alg_inversion_number" }
alg_traits = { path = "../algebra/alg_traits" }
bfs = { path = "../algolib/bfs" }
bfs01 = { path = "../algolib/bfs01" }
convex_hull = { path = "../geometry/convex_hull" }
crt = { path = "../numbers/crt" }
dbg = { path = "../utils/dbg" }
dfs = { path = "../algolib/dfs" }
dial = { path = "../algolib/dial" }
dijkstra_radix_heap = { path = "../algolib/dijkstra_radix_heap" }
fact = { path = "../utils/fact" }
factorize = { path = "../numbers/factorize" }
fp = { path = "../utils/fp" }
gcd = { path = "../numbers/gcd" }
gridtools = { path = "../utils/gridtools" }
hld = { path = "../algolib/hld" }
lazy_segbeats = { path = "../algolib/lazy_segbeats" }
lazy_segtree = { path = "../algolib/lazy_segtree" }
max_flow = { path = "../algolib/max_flow" }
newton = { path = "../numbers/newton" }
next_permutation = { path = "../utils/next_permutation" }
ngtio = { path = "../utils/ngtio" }
not_nan = { path = "../utils/not_nan" }
open = { path = "../utils/open" }
ordtools = { path = "../utils/ordtools" }
prefix_sum = { path = "../utils/prefix_sum" }
query_test = { path = "../utils/query_test" }
radix_heap = { path = "../algolib/radix_heap" }
randtools = { path = "../utils/randtools" }
reverse = { path = "../utils/reverse" }
scc = { path = "../algolib/scc" }
segbeats = { path = "../algolib/segbeats" }
segbeats_task3 = { path = "../algolib/segbeats_task3" }
segtree = { path = "../algolib/segtree" }
seq = { path = "../utils/seq" }
small_fp = { path = "../algolib/small_fp" }
span = { path = "../utils/span" }
sparse_table = { path = "../algolib/sparse_table" }
suffix_array = { path = "../algolib/suffix_array" }
trie = { path = "../string/trie/" }
type_traits = { path = "../utils/type_traits" }
union_find = { path = "../algolib/union_find" }
z_algorithm = { path = "../algolib/z_algorithm" }

